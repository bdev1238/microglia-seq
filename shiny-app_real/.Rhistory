legend.title = element_blank(),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 50, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="black", fill="transparent", size=1.5, linetype="solid"),
panel.border = element_rect(color = 'black'),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5, size = 18, color = 'black'),
rect = element_rect(fill = 'transparent'),
text = element_text(size = 40),
legend.key.size = unit(2, 'cm'),
legend.title = element_blank(),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 50, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="black", fill="transparent", size=1.5, linetype="solid"),
panel.border = element_rect(color = 'black'),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 40, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
legend.position = 'None',
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
legend.position = 'None',
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
legend.position = 'None',
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0), angle = 45),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.ticks.x = element_text(angle = 45)
legend.position = 'None',
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.ticks.x = element_text(angle = 45),
legend.position = 'None',
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45),
legend.position = 'None',
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = 'None',
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
legend.title = element_text(names = 'Sex')
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'))
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
legend.title = element_text(names = 'Sex')
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_manual(values = c('#8c96c6','#88419d'), name = 'Sex')
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
legend.title = element_text(names = 'Sex')
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_discrete(values = c('#8c96c6','#88419d'), name = 'Sex')
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
legend.title = element_text(names = 'Sex'),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_discrete(values = c('#8c96c6','#88419d'), name = 'Sex')
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_discrete(values = c('#8c96c6','#88419d'), name = 'Sex')
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_violin(trim = FALSE)+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.9)+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_discrete(name = 'Sex')
ggplot(searched_gene, aes(age, expression, fill = sex))+
geom_bar(stat = 'identity', data = searched_gene_grouped, position = position_dodge(.9))+
geom_jitter(position = position_jitterdodge(jitter.width = 0, dodge.width = 0.9), color = 'black', alpha = 0.7, shape = 21)+
geom_errorbar(data = searched_gene_grouped, aes(ymin = expression-sem, ymax = expression + sem), width = 0.2, position=position_dodge(.9))+
labs(title = paste(goi, 'Expression'), align = 'center')+
xlab('Age/Treatment')+
ylab('Average Expression')+
theme_classic()+
theme(rect = element_rect(fill = 'transparent'),
text = element_text(size = 35, face = 'bold'),
axis.line = element_line(size = 2.5),
axis.ticks = element_line(size = 1.7),
axis.ticks.length = unit(.5, 'cm'),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(color = NA, col = 0),  # get rid of legend bg and outline
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 15, r = 0, b = 0, l = 0)),
strip.background = element_rect(color="transparent", fill="transparent", size=5, linetype="solid"),
panel.spacing = unit(1, 'cm'))+
scale_fill_discrete(name = 'Sex')
runApp('C:/Users/Ben/Dropbox/bilbo_lab_spr2020/protocols/r_scripts/microglia-seq_shiny_app/shiny_app_1.R')
runApp('C:/Users/Ben/Dropbox/bilbo_lab_spr2020/protocols/r_scripts/microglia-seq_shiny_app/shiny_app_1.R')
install.packages("shinythemes")
==
##### Load in necessary packages #####
library(shiny)
library(ggplot2)
library(dplyr)
library(shinydashboard)
library(plotly)
library(shinythemes)
df <- as_tibble(read.csv('GSE99622_hanamsagar2017_cleaned_melted.csv'))
### Load in the data and generate objects ###
setwd(choose.dir())
df <- as_tibble(read.csv('GSE99622_hanamsagar2017_cleaned_melted.csv'))
df2 <- as_tibble(read.csv('gene_ensembl_ids_opentarget.csv'))
genes <- unique(df$gene)
std_err <- function(x) sd(x) / sqrt(length(x))
runApp('dashboard_app.R')
runApp('dashboard_app.R')
runApp('dashboard_app.R')
runApp('dashboard_app.R')
runApp('dashboard_app.R')
runApp('dashboard_app.R')
runApp('dashboard_app.R')
install.packages("ggpubr")
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dashboard_app.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
tabItems(
tabItem(tabName = 'Bar Plot', h2('Bar Plot goes here')),
tabItem(tabName = 'Violin Plot', plotlyOutput('violin', width = 'auto', height = 900)),
tabItem('Dot Plot', plotlyOutput('dotplot', width = 'auto', height = 900)),
tabItem('Line Plot', h2('Widgets tab content')),
tabItem('Summary Data Table', tableOutput('summary_table')),
tabItem(tabName = 'ANOVA Tables', h2('ANOVA table goes here'))
))
ui <- dashboardPage(skin = 'black',
dashboardHeader(title = 'Microglia Development RNASeq',
titleWidth = 400,
dropdownMenu(type = "notifications",
notificationItem(
text = "WARNING LOW EXPRESSION",
icon("users")))),
dashboardSidebar(
width = 400,
selectizeInput(
'entered_gene1', 'Gene #1', choices = genes,
options = list(
placeholder = 'Type to search for gene',
onInitialize = I('function() { this.setValue(""); }'))),
selectizeInput(
'entered_gene2', 'Gene #2', choices = genes,
options = list(
placeholder = 'Type to search for gene',
onInitialize = I('function() { this.setValue(""); }'))),
selectizeInput(
'entered_gene3', 'Gene #3', choices = genes,
options = list(
placeholder = 'Type to search for gene',
onInitialize = I('function() { this.setValue(""); }'))),
selectizeInput(
'entered_gene4', 'Gene #4', choices = genes,
options = list(
placeholder = 'Type to search for gene',
onInitialize = I('function() { this.setValue(""); }'))),
sidebarMenu(
menuItem('Plots', tabName = 'Plots', icon = icon('bar-chart-o'), startExpanded = FALSE,
menuSubItem('Bar Plot', tabName = 'Bar Plot'),
menuSubItem('Violin Plot', tabName = 'Violin Plot'),
menuSubItem('Line Plot', tabName = 'Line Plot'),
menuSubItem('Dot Plot', tabName = 'Dot Plot')),
menuItem('Info', tabName = "Summary Data Table", icon = icon('info')),
menuItem('Stats', tabName = 'ANOVA Tables', icon = icon('th'))
),
checkboxGroupInput('checked_groups', label = 'Choose two ages to compare (Two-Way Anova)', choices = x),
checkboxInput('twoway_anova', label = 'Compare Across All Ages (Two-Way Anova)'),
checkboxInput('p_vals', label = 'Turn P values ON (For Bar, Violin, and single gene Line plots ONLY)'),
checkboxInput('ind_points', label = 'Turn Individual Points ON'),
htmlOutput('open_target_link'),
htmlOutput('open_target_link2')
),
dashboardBody(
tabItems(
tabItem(tabName = 'Bar Plot', h2('Bar Plot goes here')),
tabItem(tabName = 'Violin Plot', plotlyOutput('violin', width = 'auto', height = 900)),
tabItem('Dot Plot', plotlyOutput('dotplot', width = 'auto', height = 900)),
tabItem('Line Plot', h2('Widgets tab content')),
tabItem('Summary Data Table', tableOutput('summary_table')),
tabItem(tabName = 'ANOVA Tables', h2('ANOVA table goes here'))
)))
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('test_dashboard.R')
runApp('dash_app_v2.R')
runApp('dash_app_v2.R')
runApp('dashboard_app.R')
